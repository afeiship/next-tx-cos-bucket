{"version":3,"sources":["next-tx-cos-bucket.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-tx-cos-bucket.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var NxTxAbstractCos = require('@feizheng/next-tx-abstract-cos');\n  var Promise = require('bluebird');\n\n  var API_HOOKS = {\n    del: 'deleteBucketAsync',\n    gets: 'getServiceAsync'\n  };\n\n  var NxTxCosBucket = nx.declare('nx.TxCosBucket', {\n    extends: NxTxAbstractCos,\n    methods: {\n      'put,get,del,head,gets': function (inName) {\n        return function (inOptions) {\n          this.parseOptions(inOptions);\n          return this.cos[API_HOOKS[inName] || inName + 'BucketAsync'](inOptions);\n        };\n      },\n      destroy: function (inOptions) {\n        var self = this;\n        return new Promise(function (resolve) {\n          self\n            .has(inOptions)\n            .then(function (ret) {\n              if (ret) {\n                self.del(inOptions).then(resolve).catch(resolve);\n              } else {\n                resolve(null);\n              }\n            })\n            .catch(resolve);\n        });\n      },\n      create: function (inOptions) {\n        var self = this;\n        var options = nx.mix(null, { ACL: 'public-read' }, inOptions);\n        return new Promise(function (resolve) {\n          self\n            .has(options)\n            .then(function (ret) {\n              if (!ret) {\n                self.put(options).then(resolve).catch(resolve);\n              } else {\n                resolve(null);\n              }\n            })\n            .catch(resolve);\n        });\n      },\n      has: function (inOptions) {\n        var self = this;\n        return new Promise(function (resolve) {\n          self\n            .head(inOptions)\n            .then(function () {\n              resolve(true);\n            })\n            .catch(function () {\n              resolve(false);\n            });\n        });\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxTxCosBucket;\n  }\n})();\n"]}