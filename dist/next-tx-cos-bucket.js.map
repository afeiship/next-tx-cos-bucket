{"version":3,"sources":["next-tx-cos-bucket.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"next-tx-cos-bucket.js","sourcesContent":["(function () {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('@feizheng/next-js-core2');\n  var COS = require('cos-nodejs-sdk-v5');\n  var Promise = require('bluebird');\n  var DEFAULT_OPTIONS = {\n    SecretId: 'COS_SECRETID',\n    SecretKey: 'COS_SECRETKEY'\n  };\n\n  var API_HOOKS = {\n    del: 'deleteBucketAsync',\n    gets: 'getServiceAsync'\n  };\n\n  var NxTxCosBucket = nx.declare('nx.TxCosBucket', {\n    methods: {\n      init: function (inOptions) {\n        this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n        this.cos = new COS(this.options);\n        Promise.promisifyAll(this.cos, { context: this.cos });\n      },\n      'put,get,del,head,gets': function (inName) {\n        return function (inOptions) {\n          this.parseOptions(inOptions);\n          return this.cos[API_HOOKS[inName] || inName + 'BucketAsync'](inOptions);\n        };\n      },\n      destroy: function (inOptions) {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n          self.has(inOptions).then(function (ret) {\n            if (ret) {\n              self\n                .del(inOptions)\n                .then(function (response) {\n                  resolve(response);\n                })\n                .catch(function (err) {\n                  reject(err);\n                });\n            } else {\n              resolve(null);\n            }\n          });\n        });\n      },\n      create: function (inOptions) {\n        var self = this;\n        var options = nx.mix(null, { ACL: 'public-read' }, inOptions);\n        return new Promise(function (resolve, reject) {\n          self.has(inOptions).then(function (ret) {\n            if (!ret) {\n              self\n                .put(options)\n                .then(function (response) {\n                  resolve(response);\n                })\n                .catch(function (err) {\n                  reject(err);\n                });\n            } else {\n              resolve(null);\n            }\n          });\n        });\n      },\n      has: function (inOptions) {\n        var self = this;\n        return new Promise(function (resolve, reject) {\n          self\n            .head(inOptions)\n            .then(function () {\n              resolve(true);\n            })\n            .catch(function (err) {\n              resolve(false);\n            });\n        });\n      },\n      parseOptions: function (inOptions) {\n        if (!inOptions) return;\n        var appId = this.options.id;\n        var bucket = inOptions.Bucket;\n        bucket && (inOptions.Bucket = bucket.includes(appId) ? bucket : bucket + '-' + appId);\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxTxCosBucket;\n  }\n})();\n"]}